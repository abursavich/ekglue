package xds

import (
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

var (
	// Number of cluster updates that have been seen by the server.
	clusterUpdateCount = promauto.NewCounter(prometheus.CounterOpts{
		Name: "cluster_update_count",
		Help: "The number of cluster updates that have been seen.",
	})

	// Internal counters relating to AddCluster -> Subscriber messaging.
	clusterUpdateSessionsInformed = promauto.NewCounter(prometheus.CounterOpts{
		Name: "cluster_update_sessions_informed",
		Help: "The number of sessions that have been informed of updates.  (internal)",
	})
	clusterUpdateSessionsMissed = promauto.NewCounter(prometheus.CounterOpts{
		Name: "cluster_update_sessions_missed",
		Help: "The number of sessions that missed an update because writing new cluster information to the session blocked.  (internal)",
	})

	// Number of Envoy instances with an open CDS stream.
	cdsClientsStreaming = promauto.NewGauge(prometheus.GaugeOpts{
		Name: "cds_active_stream_count",
		Help: "The number of clients connected and streaming cluster updates.",
	})

	// A history of config versions generated by this process.
	clusterConfigVersions = promauto.NewGaugeVec(prometheus.GaugeOpts{
		Name: "cluster_config_versions",
		Help: "The age of the named config_version.",
	}, []string{"config_version"})

	// A history of acceptance/rejection of every config version generated by this process.
	clusterConfigAcceptanceStatus = promauto.NewCounterVec(prometheus.CounterOpts{
		Name: "cluster_config_acceptance_status",
		Help: "The number of Envoy instances that have accepted or rejected a config version.",
	}, []string{"config_version", "status"})
)
